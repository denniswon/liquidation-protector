// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PriceUpdate extends ethereum.Event {
  get params(): PriceUpdate__Params {
    return new PriceUpdate__Params(this);
  }
}

export class PriceUpdate__Params {
  _event: PriceUpdate;

  constructor(event: PriceUpdate) {
    this._event = event;
  }

  get roundId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OracleMock__getLatestPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class OracleMock__getPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class OracleMock__roundPriceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPrice(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }
}

export class OracleMock extends ethereum.SmartContract {
  static bind(address: Address): OracleMock {
    return new OracleMock("OracleMock", address);
  }

  decimal(): BigInt {
    let result = super.call("decimal", "decimal():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimal", "decimal():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatestPrice(): OracleMock__getLatestPriceResult {
    let result = super.call(
      "getLatestPrice",
      "getLatestPrice():(uint256,uint256)",
      []
    );

    return new OracleMock__getLatestPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getLatestPrice(): ethereum.CallResult<OracleMock__getLatestPriceResult> {
    let result = super.tryCall(
      "getLatestPrice",
      "getLatestPrice():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleMock__getLatestPriceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getPrice(_roundId: BigInt): OracleMock__getPriceResult {
    let result = super.call("getPrice", "getPrice(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(_roundId)
    ]);

    return new OracleMock__getPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getPrice(
    _roundId: BigInt
  ): ethereum.CallResult<OracleMock__getPriceResult> {
    let result = super.tryCall(
      "getPrice",
      "getPrice(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_roundId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleMock__getPriceResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  operators(param0: Address): boolean {
    let result = super.call("operators", "operators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_operators(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("operators", "operators(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  roundId(): BigInt {
    let result = super.call("roundId", "roundId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_roundId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("roundId", "roundId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roundPrice(param0: BigInt): OracleMock__roundPriceResult {
    let result = super.call(
      "roundPrice",
      "roundPrice(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OracleMock__roundPriceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_roundPrice(
    param0: BigInt
  ): ethereum.CallResult<OracleMock__roundPriceResult> {
    let result = super.tryCall(
      "roundPrice",
      "roundPrice(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OracleMock__roundPriceResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _set(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetPriceCall extends ethereum.Call {
  get inputs(): SetPriceCall__Inputs {
    return new SetPriceCall__Inputs(this);
  }

  get outputs(): SetPriceCall__Outputs {
    return new SetPriceCall__Outputs(this);
  }
}

export class SetPriceCall__Inputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }

  get _price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPriceCall__Outputs {
  _call: SetPriceCall;

  constructor(call: SetPriceCall) {
    this._call = call;
  }
}
