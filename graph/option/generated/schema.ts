// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class KiOption extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save KiOption entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type KiOption must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("KiOption", id.toString(), this);
    }
  }

  static load(id: string): KiOption | null {
    return changetype<KiOption | null>(store.get("KiOption", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get underlying(): Bytes {
    let value = this.get("underlying");
    return value!.toBytes();
  }

  set underlying(value: Bytes) {
    this.set("underlying", Value.fromBytes(value));
  }

  get collateral(): Bytes {
    let value = this.get("collateral");
    return value!.toBytes();
  }

  set collateral(value: Bytes) {
    this.set("collateral", Value.fromBytes(value));
  }

  get barrierPrice(): BigInt {
    let value = this.get("barrierPrice");
    return value!.toBigInt();
  }

  set barrierPrice(value: BigInt) {
    this.set("barrierPrice", Value.fromBigInt(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value!.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get isUp(): boolean {
    let value = this.get("isUp");
    return value!.toBoolean();
  }

  set isUp(value: boolean) {
    this.set("isUp", Value.fromBoolean(value));
  }

  get isPlus(): boolean {
    let value = this.get("isPlus");
    return value!.toBoolean();
  }

  set isPlus(value: boolean) {
    this.set("isPlus", Value.fromBoolean(value));
  }

  get blockTimeStamp(): BigInt {
    let value = this.get("blockTimeStamp");
    return value!.toBigInt();
  }

  set blockTimeStamp(value: BigInt) {
    this.set("blockTimeStamp", Value.fromBigInt(value));
  }
}

export class OptionTokenBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OptionTokenBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OptionTokenBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OptionTokenBalance", id.toString(), this);
    }
  }

  static load(id: string): OptionTokenBalance | null {
    return changetype<OptionTokenBalance | null>(
      store.get("OptionTokenBalance", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get lastBlock(): BigInt {
    let value = this.get("lastBlock");
    return value!.toBigInt();
  }

  set lastBlock(value: BigInt) {
    this.set("lastBlock", Value.fromBigInt(value));
  }

  get redeemed(): boolean {
    let value = this.get("redeemed");
    return value!.toBoolean();
  }

  set redeemed(value: boolean) {
    this.set("redeemed", Value.fromBoolean(value));
  }
}

export class OptionExecuted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OptionExecuted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OptionExecuted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OptionExecuted", id.toString(), this);
    }
  }

  static load(id: string): OptionExecuted | null {
    return changetype<OptionExecuted | null>(store.get("OptionExecuted", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get optionId(): Bytes {
    let value = this.get("optionId");
    return value!.toBytes();
  }

  set optionId(value: Bytes) {
    this.set("optionId", Value.fromBytes(value));
  }

  get optionName(): string {
    let value = this.get("optionName");
    return value!.toString();
  }

  set optionName(value: string) {
    this.set("optionName", Value.fromString(value));
  }

  get optionAddress(): Bytes {
    let value = this.get("optionAddress");
    return value!.toBytes();
  }

  set optionAddress(value: Bytes) {
    this.set("optionAddress", Value.fromBytes(value));
  }

  get roundId(): BigInt {
    let value = this.get("roundId");
    return value!.toBigInt();
  }

  set roundId(value: BigInt) {
    this.set("roundId", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }
}
