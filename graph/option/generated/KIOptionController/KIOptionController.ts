// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get optionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get optionAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get roundID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get optionName(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class KIOptionController extends ethereum.SmartContract {
  static bind(address: Address): KIOptionController {
    return new KIOptionController("KIOptionController", address);
  }

  DISPUTE_BUFFER(): BigInt {
    let result = super.call("DISPUTE_BUFFER", "DISPUTE_BUFFER():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DISPUTE_BUFFER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DISPUTE_BUFFER",
      "DISPUTE_BUFFER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressRouter(): Address {
    let result = super.call("addressRouter", "addressRouter():(address)", []);

    return result[0].toAddress();
  }

  try_addressRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressRouter",
      "addressRouter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  canExecute(_optionID: Bytes, _roundID: BigInt): boolean {
    let result = super.call(
      "canExecute",
      "canExecute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_optionID),
        ethereum.Value.fromUnsignedBigInt(_roundID)
      ]
    );

    return result[0].toBoolean();
  }

  try_canExecute(
    _optionID: Bytes,
    _roundID: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canExecute",
      "canExecute(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_optionID),
        ethereum.Value.fromUnsignedBigInt(_roundID)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isExecuted(param0: Address): boolean {
    let result = super.call("isExecuted", "isExecuted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isExecuted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isExecuted", "isExecuted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get _optionID(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _roundID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class ExecuteMultiCall extends ethereum.Call {
  get inputs(): ExecuteMultiCall__Inputs {
    return new ExecuteMultiCall__Inputs(this);
  }

  get outputs(): ExecuteMultiCall__Outputs {
    return new ExecuteMultiCall__Outputs(this);
  }
}

export class ExecuteMultiCall__Inputs {
  _call: ExecuteMultiCall;

  constructor(call: ExecuteMultiCall) {
    this._call = call;
  }

  get _optionIds(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get _roundIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ExecuteMultiCall__Outputs {
  _call: ExecuteMultiCall;

  constructor(call: ExecuteMultiCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _addressRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetDisputePeriodCall extends ethereum.Call {
  get inputs(): SetDisputePeriodCall__Inputs {
    return new SetDisputePeriodCall__Inputs(this);
  }

  get outputs(): SetDisputePeriodCall__Outputs {
    return new SetDisputePeriodCall__Outputs(this);
  }
}

export class SetDisputePeriodCall__Inputs {
  _call: SetDisputePeriodCall;

  constructor(call: SetDisputePeriodCall) {
    this._call = call;
  }

  get _disputeBuffer(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDisputePeriodCall__Outputs {
  _call: SetDisputePeriodCall;

  constructor(call: SetDisputePeriodCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
